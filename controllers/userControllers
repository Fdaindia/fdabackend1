const User = require("../models/users")
const bcrypt = require("bcrypt")

// to register user
exports.registerUser = async (req, res) => {
  try {
    const { username, email, state, mobile, password, confirmPassword } =
      req.body

    if (password !== confirmPassword) {
      return res.status(400).json({ message: "Passwords do not match" })
    }

    const existingUser = await User.findOne({
      $or: [{ email }, { username }],
    })
    if (existingUser) {
      return res.status(400).json({
        message: "User already exists with provided email or username",
      })
    }

    const user = new User({
      username,
      email,
      state,
      mobile,
      password,
    })

    await user.save()

    res.status(201).json({
      message: "User registered successfully",
      user: {
        username: user.username,
        email: user.email,
        state: user.state,
        mobile: user.mobile,
      },
    })
  } catch (err) {
    res.status(500).json({ message: err.message })
  }
}

// to login user
exports.loginUser = async (req, res) => {
  try {
    const { email, password } = req.body

    const user = await User.findOne({ email })
    if (!user) {
      return res.status(400).json({ message: "Invalid email" })
    }

    console.log("User found:", user)

    const ispasswordMatchingfromDB = await bcrypt.compare(
      password,
      user.password
    )

    console.log(ispasswordMatchingfromDB)

    if (!ispasswordMatchingfromDB) {
      console.log("Password does not match")
      return res.status(400).json({ message: "Invalid password" })
    }

    res.status(200).json({
      message: "Login successful",
      user: {
        username: user.username,
        email: user.email,
        state: user.state,
        mobile: user.mobile,
      },
    })
  } catch (err) {
    res.status(500).json({ message: err.message })
  }
}

// Get all user
exports.getUserProfile = async (req, res) => {
  try {
    const user = await User.find({})
    if (!user) {
      return res.status(404).json({ message: "User not found" })
    }
    res.status(200).json(user)
  } catch (err) {
    res.status(500).json({ message: err.message })
  }
}
